from mode import *
import torch
from torchmetrics import ConfusionMatrix, ROC, F1Score
from sklearn import metrics
import matplotlib.pyplot as plt

    
def f1_score(pred, target, ax, type='tensor'):
    if type == 'tensor':
        targets = torch.tensor(target).long()
        preds = torch.tensor(pred).long()
        
    f1 = F1Score()
    print(f' [ F1-Score ] : {f1(preds,targets)}')

def confusion_matrix(pred, target, name, ax, mode):
    if mode == 'dl':
        target = np.asarray(target)
        pred = np.asarray(pred)
    elif mode == 'ml':
        pass
    metrics.ConfusionMatrixDisplay.from_predictions(
        target, pred, ax=ax
    )

    ax.set_title(f"confusion matrix({name})")
    return ax

def ROC_curve(pred_probas, target, name, ax, mode):
    '''
    ## ROC curve\n
    - if you used deep learning model, you shoud type 'dl' in mode
    - if you used machine learning model, you shoud type 'ml' in mode
    '''
    if mode=='dl':
        target = np.asarray(target)
        pred_probas = torch.cat(pred_probas).numpy()[:, -1]
    elif mode=='ml':
        pass
    fpr, tpr, thresholds = metrics.roc_curve(target, pred_probas)

    print(f'[ Roc Curve ] \nfpr : {fpr}\ntpr : {tpr}\nthresholds : {thresholds}')
    ax.plot(fpr, tpr, 'r-')
    ax.set_xlabel("false positive rate")
    ax.set_ylabel("true positive rate")
    ax.set_title(f"ROC curve({name})")
    return ax


    