import torch
import torch.nn
import torch.nn.functional as F
from torch.utils.data import DataLoader

from load_datasets import *
from model import *

def train(args):
    datasets = load_datasets(args)

    train_data_loader = DataLoader(
        datasets[:1200],
        batch_size=32,
        shuffle=True
    )

    test_data_loader = DataLoader(
        datasets[1200:],
        batch_size=32,
        shuffle=False
    )

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = Classifier(
        in_size=datasets.size(1), 
        device=device
    )

    for epoch in range(20):
        model.losses = []
        for data, labels in train_data_loader:
            model.train(data, labels)           
        if epoch % 5 == 0:
            print(f"[{epoch+1} epoch] mean loss : {sum(model.losses) / len(train_data_loader):.3f}")

    model.eval()
    
    with torch.no_grad():
        model.losses = []
        for data, labels in test_data_loader:
            model.test(data, labels)
        print(f"[{epoch+1} epoch] mean loss : {sum(model.losses) / len(train_data_loader):.3f}")

    return